pragma solidity ^0.6;

contract banking
{
    mapping(address=>uint)public user_account;
    mapping(address=>bool)public user_exists;

    function create_account() public payable returns(string memory)
    {
        require(user_exists[msg.sender]==false,"Account Already Created");
        if(msg.value==0)
        {
            user_account[msg.sender]=0;
            user_exists[msg.sender]=true;
            return "Account Created";
        }
        require(user_exists[msg.sender]==false,"Account Already Created");
        user_account[msg.sender]=msg.value;
        user_exists[msg.sender]=true;
        return "Account Created";
    }
    function deposite() public payable returns(string memory)
    {
        require(user_exists[msg.sender]==true,"User Not exists");
        require(msg.value>0,"Value for deposit is zero");
        user_account[msg.sender]=user_account[msg.sender]+msg.value;
        return "Deposited Successfully";
    }
    function withdraw(uint amount) public payable returns(string memory)
    {
        require(user_account[msg.sender]>amount,"Insufficient balance");
        require(user_exists[msg.sender]==true,"User does not exists");
        require(amount>0,"Amount Should be greater than zero");
        user_account[msg.sender]=user_account[msg.sender]-amount;
        msg.sender.transfer(amount);
        return "Withdraw Successful";
    }
    function transfer(address payable userAddress,uint amount) public returns(string memory)
    {
        require(user_account[msg.sender]>amount,"Insufficient Balance");
        require(user_exists[msg.sender]==true,"User Does Not exists");
        require(user_exists[msg.sender]==true,"Transfer Account does not exists");
        require(amount>0,"Amount Should be greater than zero");
        user_account[msg.sender]=user_account[msg.sender]-amount;
        user_account[userAddress]=user_account[userAddress]+amount;
        return "Transfer Successful";
    }
    function send_amt(address payable toAddress, uint256 amount) public payable returns(string memory)
    {
        require(user_account[msg.sender]>amount,"Insufficient Balance");
        require(user_exists[msg.sender]==true,"User Does Not exists");
        require(amount>0,"Amount should be greater than Zero");
        user_account[msg.sender]=user_account[msg.sender]-amount;
        toAddress.transfer(amount);
        return "Transfer Successful";
    }
    function user_balance() public view returns(uint)
    {
        return user_account[msg.sender];
    }
    function account_exists() public view returns(bool)
    {
        return user_exists[msg.sender];
    }
}